% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/8.2-ens.R
\docType{methods}
\name{buildEnsemble}
\alias{buildEnsemble}
\alias{buildEnsemble,ExprsModel-method}
\alias{buildEnsemble,ExprsPipeline-method}
\title{Build Ensemble}
\usage{
buildEnsemble(object, ...)

\S4method{buildEnsemble}{ExprsModel}(object, ...)

\S4method{buildEnsemble}{ExprsPipeline}(object, colBy = 0, how = 0,
  gate = 0, top.N = 0)
}
\arguments{
\item{object}{An \code{\link{ExprsModel-class}} object.}

\item{...}{Additional \code{ExprsModel} objects to use in an ensemble.}

\item{colBy}{A character vector or string. Specifies column(s) to use when
filtering by classifier performance. Listing multiple columns will result
in a filter based on a performance metric equal to the product of those
listed columns.}

\item{how}{A numeric scalar. Arguments between 0 and 1 will impose
a threshold or ceiling filter, respectively, based on the raw value of
\code{colBy}. Arguments between 1 and 100 will impose a filter based on
the percentile of \code{colBy}. The user may also provide "midrange",
"median", or "mean" as an argument for these filters. Set \code{how = 0}
or \code{gate = 0}, to skip the threshold or ceiling filter,
respectively.}

\item{gate}{A numeric scalar. Arguments between 0 and 1 will impose
a threshold or ceiling filter, respectively, based on the raw value of
\code{colBy}. Arguments between 1 and 100 will impose a filter based on
the percentile of \code{colBy}. The user may also provide "midrange",
"median", or "mean" as an argument for these filters. Set \code{how = 0}
or \code{gate = 0}, to skip the threshold or ceiling filter,
respectively.}

\item{top.N}{A numeric scalar. Determines the top N models based on
\code{colBy} to include after the threshold and ceiling filters.
In the case that the \code{@summary} slot contains the column
"boot", this determines the top N models for each unique bootstrap.
Set \code{top.N = 0} to skip this subset.}
}
\value{
An \code{\link{ExprsEnsemble-class}} object.
}
\description{
Aggregates multiple classifiers into a single ensemble classifier.
}
\details{
The \code{buildEnsemble} function allows a user to quickly build an ensemble
 classifier. Using the \code{\link{ExprsModel-class}} method, one can specify
 manually any number of \code{ExprsModel} objects to include in the ensemble.
 These models do not necessarily have to derive from the same \code{build}
 method.

Using the \code{\link{ExprsPipeline-class}} method, one can also quickly
 build an ensemble from an \code{ExprsPipeline} object. This method works
 by first passing all arguments to \code{\link{pipeFilter}}, then aggregating
 the remaining models into a classifier. As an adjunct to this method, consider
 joining multiple \code{ExprsPipeline} objects with \code{\link{conjoin}}.
}
\section{Methods (by class)}{
\itemize{
\item \code{ExprsModel}: Method to build ensemble from \code{ExprsModel} objects.

\item \code{ExprsPipeline}: Method to build ensemble from \code{ExprsPipeline} objects.
}}
\seealso{
\code{\link{plCV}}, \code{\link{plGrid}}, \code{\link{plMonteCarlo}}, \code{\link{plNested}}
}

